[alias]

	# GUI's
	tower    = "! /bin/sh $HOME/.gitscripts/tower.sh" # Tower
	smerge   = "! function f() { smerge ./ -b; }; f"  # Sublime Merge
	lazygit  = "! function f() { ttab -w -t 'lazygit' -q 'lazygit && exit'; }; f"
	lazygitp = "! function f() { ttab -w -t 'lazygit' -q 'lazygit && git p && exit'; }; f"
	lg      = lazygit
	gui     = tower
	guip    = lazygitp
	g       = gui
	gp      = guip
	ga = "! function f() { git add . && git g; }; f" # Add all files and open the GUI.
	glog    = "! /bin/sh $HOME/.gitscripts/towerlog.sh"

	# Commit
	cm = commit

	# Checkout.
	co     = checkout
	m      = merge

	# ghq sortcut.
	repo = "! function f() { ghq get \"$1\"; }; f" # Commit all files, add message inline, and push.

	## Staging
	mod     = "add -u" # Add modifed
	all     = "add ." # All all
	rm-c    = "rm --cached"

	## Comitting
	cm = "! function f() { git mod && git commit; }; f"
	ca = "! function f() { git all && git commit; }; f"
	cs = "commit"
	ai = "! git ls-files -m -o --exclude-standard | fzf --print0 -m | xargs -0 -t -o git add" # https://spin.atomicobject.com/2018/04/05/fuzzy-find-git-add/

	## All
	#cae     = commit -a --verbose # Commit and add all files and add message to editor.
	#cam    = commit -am # Commit and add all files and add message inline (don't push).

	## All and Push
	#caep   = "! function f() { git cae && git p; }; f" # Commit all files, add message in editor, and push.
	#camp   = "! function f() { git commit -am \"$1\" && git p; }; f" # Commit all files, add message inline, and push.

	## Just commit (empty) and push.
	#pewa   = "! function f() { git add . && git commit -a --allow-empty-message -m '' && git p; }; f" # Push an empty commit with all updates.
	pew    = "! function f() { git commit -a --allow-empty-message -m '' && git p; }; f" # Push an empty commit with all updates.

	## Staged
	#cse    = commit --verbose # Commit staged files and write message in editor.
	#csm    = commit -m # Commit staged files, write a message inline (don't push).

	## Staged and Push
	#csep   = "! function f() { git cse && git p; }; f" # Commit staged files, write a message in an editor, and push.
	#csmp   = "! function f() { git commit -m \"$1\" && git p; }; f" # Commit staged files, write a message inline, and push.

	## Modified files only & Push
	#cmep   = "! function f() { git add -u && git commit --verbose && git p; }; f" # Commit all modifed files and write a message in the editor and push.
	#cmmp   = "! function f() { git add -u && git commit -m \"$1\" && git p; }; f" # Commit all modifed files w/ a message and push.

	# Status
	stat   = status
	s      = status
	sd     = "! function f() { git status && git diff ;}; f"
	sds    = "! function f() { git status && git diff --staged ;}; f"

	# Logs
	blog   = log --oneline --decorate --graph # Better log, looks better in CLI.
	l      = blog # Normal log, but looks better.

	# Reset & Clear
	rhh    = reset --hard HEAD # Reset easily.
	rhhc   = "! git rhh && git clear" # Reset and remove new files.
	clear  = clean -df # Just remove new files

	# Push/Pull
	p      = "! git push -u origin \"$(git rev-parse --abbrev-ref HEAD)\"" # git push current branch.
	u      = "! git pull origin \"$(git rev-parse --abbrev-ref HEAD)\"" # git pull current branch.
	pt     = push --tags

	# Branches & Tags
	b      = "! echo $(git branch --show-current)" # Show the current branch.
	new    = checkout -b # New branch
	cb     = "! git b | pbcopy" # Copy the current branch to the clipboard.

	## Moving Branches and tags around
	db     = "! function f() { git branch -D $1; git push origin :$1 ;}; f"
	dt     = "! function f() { git tag -d $1; git push origin :refs/tags/$1; }; f"
	fb     = "! /bin/bash -c 'source $HOME/.antigen/bundles/aubreypwd/zsh-plugin-fzf-git-branch/fzf-git-branch.plugin.zsh && fzf-git-branch'" # See https://github.com/aubreypwd/zsh-plugin-fzf-git-branch
	mt     = "! function f() { git dt $1; git tag $1; git push --tags; }; f" # Move tag here.

	# DIFFs
	diffs  = diff --staged
	ds     = diffs
	d      = diff

[push]
	default = current

[user]
	name = Aubrey Portwood
	email = code@aubreypwd.com

[core]
	editor = vim
	excludesfile = /Users/aubreypwd/.gitignore

[color]
	ui = true
	diff = auto
	status = auto
	branch = auto
	interactive = auto
	pager = true

[credential]
	helper = osxkeychain

[color]
	diff = auto
	status = auto
	branch = auto
	interactive = auto
	ui = true
	pager = true

[color "status"]
	added = green
	changed = red bold
	untracked = magenta bold

[color "branch"]
	remote = yellow

[gui]
	tabsize = 2

[diff]
	noprefix = true
	tool = meld

[difftool]
	prompt = false

[difftool "meld"]
	trustExitCode = true
	cmd = open -W -a Meld --args \"$LOCAL\" \"$REMOTE\"

[pager]
	diff = false
	show = false

[mergetool "smerge"] # Sublime Merge as mergetool
	cmd = smerge mergetool \"$BASE\" \"$LOCAL\" \"$REMOTE\" -o \"$MERGED\"
	trustExitCode = true

[mergetool "meld"]
	trustExitCode = true
	cmd = open -W -a Meld --fresh --new --args --auto-merge \"$PWD/$LOCAL\" \"$PWD/$BASE\" \"$PWD/$REMOTE\" --output=\"$PWD/$MERGED\"

[mergetool "sublime"]
	cmd = subl -w $MERGED
	trustExitCode = false

[merge]
	tool = meld

[mergetool]
	keepBackup = false
	prompt = false

[pull]
	rebase = false

[ghq]
	root = ~/Repos

[filter "lfs"]
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
	process = git-lfs filter-process
	required = true

[init]
	defaultBranch = main

[diff "plist"]
	textconv = plutil -convert xml1 -o -
