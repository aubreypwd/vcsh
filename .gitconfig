[alias]
	ai       = "! git ls-files -m -o --exclude-standard | fzf --reverse --height 10 --print0 -m | xargs -0 -t -o git add -f" # https://spin.atomicobject.com/2018/04/05/fuzzy-find-git-add/
	aic      = "! git ai && git c"
	all      = "add ." # All all
	b        = "! echo $(git branch --show-current)" # Show the current branch.
	c        = commit
	ca       = "! function f() { git all && git commit; }; f"
	cb       = "! git b | pbcopy" # Copy the current branch to the clipboard.
	clear    = clean -df # Just remove new files
	cm       = "! function f() { git mod && git commit; }; f"
	co       = checkout
	ko       = "! function f() { git rhhc && git co "$1" && git pull origin "$1"; }; f"
	cs       = commit # Commit staged
	d        = diff
	db       = "! function f() { git branch -D $1; git push origin :$1 ;}; f"
	di       = "! git ls-files -m -o --exclude-standard | fzf --reverse --height 10 --print0 -m | xargs -0 -t -o git diff" # Interactive diff.
	diaic    = "! git di && git ai && git c"
	diffs    = diff --staged
	dm       = diff
	ds       = diffs
	dt       = "! function f() { git tag -d $1; git push origin :refs/tags/$1; }; f"
	f        = "fetch"
	fb       = "! /bin/bash -c 'source $HOME/.antigen/bundles/aubreypwd/zsh-plugin-fzf-git-branch/fzf-git-branch.plugin.zsh && fzf-git-branch'" # See https://github.com/aubreypwd/zsh-plugin-fzf-git-branch
	g        = gui
	ga       = "! function f() { git add . && git g; }; f" # Add all files and open the GUI.
	get      = "! function f() { ghq get \"$1\"; }; f" # Commit all files, add message inline, and push.
	gh       = "! function f() { gh \"$@\"; }; f"
	gh-get   = "! function f() { ghq get \"git@github.com:$1/$2.git$1\"; }; f"
	# glog     = "! /bin/sh $HOME/.gitscripts/towerlog.sh"
	gui      = lg-gui
	guip     = lg-guip
	l        = log --oneline --decorate --graph # Better log, looks better in CLI.
	l1       = l -n 1
	l10      = l -n 10
	l100     = l -n 20
	l2       = l -n 2
	l20      = l -n 20
	l5       = l -n 5
	l50      = l -n 20
	lg-gui   = "! function f() { ttab -w -t 'lazygit' -q 'lazygit && exit'; }; f"
	lg-guip  = "! function f() { ttab -w -t 'lazygit' -q 'lazygit && git p && exit'; }; f"
	lg       = "! function f() { lazygit . }; f"
	lgg      = lg-gui
	lggp     = lg-guip
	m        = merge
	mod      = "add -u" # Add modifed
	mt       = "! function f() { git dt $1; git tag $1; git push --tags; }; f" # Move tag here.
	nb       = checkout -b # New branch
	p        = "! git push -u origin \"$(git rev-parse --abbrev-ref HEAD)\"" # git push current branch.
	pew      = "! function f() { git commit -a --allow-empty-message -m '' && git p; }; f" # Push an empty commit with all updates (dependant in other packages).
	pt       = push --tags
	px       = "! git p && exit" # Push and exit
	rhh      = reset --hard HEAD # Reset easily.
	rhhc     = "! git rhh && git clear" # Reset and remove new files.
	rmc      = "rm --cached"
	rrr      = rhhc
	rrrp     = "! git rhhc && git pull"
	s        = status
	sd       = "! function f() { git status && git diff ;}; f"
	sds      = "! function f() { git status && git diff --staged ;}; f"
	smerge   = "! function f() { smerge ./ -b; }; f"  # Sublime Merge
	squash-all = "rebase --root -i"
	stat     = status
	stow     = "stash push -m"
	# tower    = "! /bin/sh $HOME/.gitscripts/tower.sh" # Tower
	u        = "! git pull origin \"$(git rev-parse --abbrev-ref HEAD)\"" # git pull current branch.
	usa      = "reset" # Unstage all files.

[push]
	default = current
	autoSetupRemote = true

[user]
	name          = Aubrey Portwood
	email         = code@aubreypwd.com

[core]
	editor        = vim
	excludesfile  = /Users/aubreypwd/.gitignore

[color]
	ui          = true
	diff        = auto
	status      = auto
	branch      = auto
	interactive = auto
	pager       = true

[credential]
	helper = osxkeychain

[color]
	diff        = auto
	status      = auto
	branch      = auto
	interactive = auto
	ui          = true
	pager       = true

[color "status"]
	added     = green
	changed   = red bold
	untracked = magenta bold

[color "branch"]
	remote = yellow

[gui]
	tabsize = 2

[diff]
	noprefix = true

[difftool "meld"]
	trustExitCode = true
	cmd           = open -W -a Meld --args \"$LOCAL\" \"$REMOTE\"

[pager]
	diff = false
	show = false

[mergetool "smerge"] # Sublime Merge as mergetool
	cmd           = smerge mergetool \"$BASE\" \"$LOCAL\" \"$REMOTE\" -o \"$MERGED\"
	trustExitCode = true

[mergetool "meld"]
	trustExitCode = true
	cmd           = open -W -a Meld --fresh --new --args --auto-merge \"$PWD/$LOCAL\" \"$PWD/$BASE\" \"$PWD/$REMOTE\" --output=\"$PWD/$MERGED\"

[mergetool "sublime"]
	cmd           = subl -w $MERGED
	trustExitCode = false

[mergetool]
	keepBackup = false

[pull]
	rebase = false

[ghq]
	root = ~/Repos

[filter "lfs"]
	clean    = git-lfs clean -- %f
	smudge   = git-lfs smudge -- %f
	process  = git-lfs filter-process
	required = true

[init]
	defaultBranch = main

[diff "plist"]
	textconv = plutil -convert xml1 -o -

[merge]
	tool = smerge
